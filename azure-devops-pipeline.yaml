trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  awsRegion: 'us-east-1'
  functionName: 'HelloWorld'
  terraformVersion: '0.15.0'
  dotnetVersion: '3.1.x'

steps:
- checkout: self

- task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
  displayName: 'Install and Configure AWS CLI'
  inputs:
    awsCredentials: 'AWS Credentials'  # AWS service connection
    regionName: '$(awsRegion)'
    scriptType: 'inline'
    inlineScript: |
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '$(terraformVersion)'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform Init'
  inputs:
    workingDirectory: '$(Build.Repository.LocalPath)/terraform-configuration'
    command: 'init'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform Apply'
  inputs:
    workingDirectory: '$(Build.Repository.LocalPath)/terraform-configuration'
    command: 'apply'
    environmentServiceNameAWS: 'AWS Credentials'  # AWS service connection
    commandOptions: '-auto-approve'

- script: |
    cd $(Build.Repository.LocalPath)/terraform-configuration
    terraform output vpc_id
    terraform output subnet_ids
    terraform output s3_bucket_name
    terraform output dynamodb_table_name
    terraform output rds_instance_endpoint
    terraform output lambda_function_name
  displayName: 'Verify Terraform Outputs'

- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Package .NET Application'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/HelloWorld.csproj'
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

- task: AmazonWebServices.aws-vsts-tools.AWSLambdaDeploy.AWSLambdaDeploy@1
  displayName: 'Deploy .NET Application to AWS Lambda'
  inputs:
    awsCredentials: 'AWS Credentials'  # AWS service connection
    regionName: '$(awsRegion)'
    functionType: 'normal'
    command: 'update-function-code'
    functionName: '$(functionName)'
    zipFile: '$(Build.ArtifactStagingDirectory)/HelloWorld.zip'

- script: |
    payload=$(cat $(Build.Repository.LocalPath)/payload.json | base64)
    aws lambda invoke --function-name $(functionName) --payload $payload response.json
  displayName: 'Test Lambda Function'
  env:
    AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
    AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
    AWS_DEFAULT_REGION: $(awsRegion)

- script: |
    cat response.json
  displayName: 'Print Lambda Response'
